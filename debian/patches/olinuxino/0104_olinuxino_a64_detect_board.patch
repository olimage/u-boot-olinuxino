--- a/board/olimex/a64_olinuxino/board.c
+++ b/board/olimex/a64_olinuxino/board.c
@@ -30,6 +30,9 @@
 #include <spl.h>
 #include <asm/setup.h>
 
+#include "../common/board_detect.h"
+#include "../common/boards.h"
+
 DECLARE_GLOBAL_DATA_PTR;
 
 void i2c_init_board(void)
@@ -224,6 +227,47 @@
 	sunxi_spl_store_dram_size(gd->ram_size);
 	clock_set_pll1(CONFIG_SYS_CLK_FREQ);
 }
+
+void spl_board_init(void)
+{
+	struct mmc *mmc = NULL;
+
+	/* Make sure ram is empty */
+	memset((void *)eeprom, 0xFF, 256);
+
+	/**
+	 * Try some detection:
+	 *
+	 * 1. If RAM > 1G, then A64-OLinuXino-2Ge8G-IND
+	 * 2. If SPI is present, then A64-OLinuXino-1Gs16M
+	 * 3. If eMMC is present, then A64-OLinuXino-1Ge4GW
+	 * 4. Else -> A64-OLinuXino-1G
+	 */
+	if ((int)(gd->ram_size >> 20) > 1024) {
+		eeprom->id = 8861;
+		eeprom->config.storage = 'e';
+		return;
+	}
+
+	if (sunxi_spi_is_present()) {
+		eeprom->id = 9065;
+		eeprom->config.storage = 's';
+		return;
+	}
+
+	mmc_initialize(NULL);
+	mmc = find_mmc_device(1);
+	if (!mmc_init(mmc)) {
+		if ((mmc->capacity >> 30) > 4)
+			eeprom->id = 9849;
+		else
+			eeprom->id = 8367;
+		eeprom->config.storage = 'e';
+		return;
+	}
+
+	eeprom->id = 8857;
+}
 #endif
 
 #ifdef CONFIG_USB_GADGET
@@ -420,6 +464,14 @@
 	return 0;
 }
 
+#ifdef CONFIG_DISPLAY_BOARDINFO
+int show_board_info(void)
+{
+	printf("Model: %s\n", olimex_get_board_name());
+	return 0;
+}
+#endif
+
 #ifdef CONFIG_SPL_LOAD_FIT
 int board_fit_config_name_match(const char *name)
 {
--- a/configs/A64-OLinuXino_defconfig
+++ b/configs/A64-OLinuXino_defconfig
@@ -2,6 +2,7 @@
 CONFIG_ARCH_SUNXI=y
 CONFIG_NR_DRAM_BANKS=1
 CONFIG_SPL=y
+CONFIG_SPL_BOARD_INIT=y
 CONFIG_MACH_SUN50I=y
 CONFIG_TARGET_A64_OLINUXINO=y
 CONFIG_RESERVE_ALLWINNER_BOOT0_HEADER=y
@@ -31,3 +32,4 @@
 CONFIG_SPI_FLASH=y
 CONFIG_SPI_FLASH_WINBOND=y
 CONFIG_SPI_FLASH_MTD=y
+CONFIG_DISPLAY_BOARDINFO=y
--- a/arch/arm/include/asm/arch-sunxi/spl.h
+++ b/arch/arm/include/asm/arch-sunxi/spl.h
@@ -86,5 +86,6 @@
 #define is_boot0_magic(addr)	(memcmp((void *)addr, BOOT0_MAGIC, 8) == 0)
 
 uint32_t sunxi_get_boot_device(void);
+uint32_t sunxi_spi_is_present(void);
 
 #endif
--- a/arch/arm/mach-sunxi/spl_spi_sunxi.c
+++ b/arch/arm/mach-sunxi/spl_spi_sunxi.c
@@ -307,5 +307,40 @@
 
 	return ret;
 }
+
+uint32_t sunxi_spi_is_present(void)
+{
+	u8 jedec_id[3];
+	spi0_init();
+
+	writel(4, SUN6I_SPI0_MBC);	/* Burst counter (total bytes) */
+	writel(1, SUN6I_SPI0_MTC);	/* Transfer counter (bytes to send) */
+	writel(1, SUN6I_SPI0_BCC);	/* SUN6I also needs this */
+
+	/* Send the JEDEC ID (9Fh) command header */
+	writeb(0x9F, SUN6I_SPI0_TXD);
+
+	/* Start the data transfer */
+	setbits_le32(SUN6I_SPI0_TCR, SUN6I_TCR_XCH);
+
+	/* Wait until everything is received in the RX FIFO */
+	while ((readl(SUN6I_SPI0_FIFO_STA) & 0x7F) < 4);
+
+	/* Read the data */
+	readb(SUN6I_SPI0_RXD);
+	jedec_id[0] = readb(SUN6I_SPI0_RXD);
+	jedec_id[1] = readb(SUN6I_SPI0_RXD);
+	jedec_id[2] = readb(SUN6I_SPI0_RXD);
+
+	spi0_deinit();
+
+	/* If all bytes are 0x00 or 0xFF there is no flash */
+	if ((jedec_id[0] == 0x00 && jedec_id[1] == 0x00 && jedec_id[2] == 0x00) ||
+	    (jedec_id[0] == 0xFF && jedec_id[1] == 0xFF && jedec_id[2] == 0xFF))
+		return 0;
+
+	return 1;
+}
+
 /* Use priorty 0 to override the default if it happens to be linked in */
 SPL_LOAD_IMAGE_METHOD("sunxi SPI", 0, BOOT_DEVICE_SPI, spl_spi_load_image);
--- a/board/olimex/a64_olinuxino/Makefile
+++ b/board/olimex/a64_olinuxino/Makefile
@@ -6,4 +6,6 @@
 #   Author: Stefan Mavrodiev <stefan@olimex.com>
 
 obj-y	+= board.o
+obj-y	+= ../common/board_detect.o
+obj-y	+= ../common/boards.o
 obj-$(CONFIG_OF_BOARD_FIXUP)	+= fdt.o
